{"version":3,"sources":["../src/TypistLoop.jsx"],"names":["TypistLoop","state","currentIndex","onTypingDone","_timer","setTimeout","showNext","props","interval","_isMounted","children","setState","Children","count","clearTimeout","map","child","i","cloneElement","Component","defaultProps","propTypes","node","isRequired","number"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEMA,U;;;;;;;;;;;;;;8LAUJC,K,GAAQ;AACNC,oBAAc;AADR,K,QAeRC,Y,GAAe,YAAM;AACnB,YAAKC,MAAL,GAAcC,WAAW,MAAKC,QAAhB,EAA0B,MAAKC,KAAL,CAAWC,QAArC,CAAd;AACD,K,QAEDF,Q,GAAW,YAAM;AACf,UAAI,CAAC,MAAKG,UAAV,EAAsB;AACpB;AACD;AAHc,UAIPC,QAJO,GAIM,MAAKH,KAJX,CAIPG,QAJO;;AAKf,YAAKC,QAAL,CAAc;AAAA,YAAGT,YAAH,SAAGA,YAAH;AAAA,eAAuB;AACnCA,wBAAc,CAACA,eAAe,CAAhB,IAAqB,gBAAMU,QAAN,CAAeC,KAAf,CAAqBH,QAArB;AADA,SAAvB;AAAA,OAAd;AAGD,K;;;;;wCAvBmB;AAClB,WAAKD,UAAL,GAAkB,IAAlB;AACD;;;2CAEsB;AACrB,WAAKA,UAAL,GAAkB,KAAlB;AACA,UAAI,KAAKL,MAAT,EAAiB;AACfU,qBAAa,KAAKV,MAAlB;AACD;AACF;;;6BAgBQ;AAAA,UACCD,YADD,GACkB,IADlB,CACCA,YADD;AAAA,UAECD,YAFD,GAEkB,KAAKD,KAFvB,CAECC,YAFD;AAAA,UAGCQ,QAHD,GAGc,KAAKH,KAHnB,CAGCG,QAHD;;AAIP,aAAO,gBAAME,QAAN,CAAeG,GAAf,CACLL,QADK,EAEL,UAACM,KAAD,EAAQC,CAAR;AAAA,eACEA,MAAMf,YAAN,IAAsB,gBAAMgB,YAAN,CAAmBF,KAAnB,EAA0B,EAAEb,0BAAF,EAA1B,CADxB;AAAA,OAFK,CAAP;AAKD;;;;EAhDsB,gBAAMgB,S;;AAAzBnB,U,CAMGoB,Y,GAAe;AACpBZ,YAAU;AADU,C;AANlBR,U,CACGqB,S,2CAAY;AACjBX,YAAU,oBAAUY,IAAV,CAAeC,UADR;AAEjBf,YAAU,oBAAUgB;AAFH,C;kBAkDNxB,U","file":"TypistLoop.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\n\nclass TypistLoop extends React.Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    interval: PropTypes.number,\n  }\n\n  static defaultProps = {\n    interval: 1000,\n  }\n\n  state = {\n    currentIndex: 0,\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false\n    if (this._timer) {\n      clearTimeout(this._timer)\n    }\n  }\n\n  onTypingDone = () => {\n    this._timer = setTimeout(this.showNext, this.props.interval)\n  }\n\n  showNext = () => {\n    if (!this._isMounted) {\n      return\n    }\n    const { children } = this.props\n    this.setState(({ currentIndex }) => ({\n      currentIndex: (currentIndex + 1) % React.Children.count(children),\n    }))\n  }\n\n  render() {\n    const { onTypingDone } = this\n    const { currentIndex } = this.state\n    const { children } = this.props\n    return React.Children.map(\n      children,\n      (child, i) =>\n        i === currentIndex && React.cloneElement(child, { onTypingDone }),\n    )\n  }\n}\n\nexport default TypistLoop\n"]}