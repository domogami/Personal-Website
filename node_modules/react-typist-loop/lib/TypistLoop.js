'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TypistLoop = function (_React$Component) {
  _inherits(TypistLoop, _React$Component);

  function TypistLoop() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TypistLoop);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TypistLoop.__proto__ || Object.getPrototypeOf(TypistLoop)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      currentIndex: 0
    }, _this.onTypingDone = function () {
      _this._timer = setTimeout(_this.showNext, _this.props.interval);
    }, _this.showNext = function () {
      if (!_this._isMounted) {
        return;
      }
      var children = _this.props.children;

      _this.setState(function (_ref2) {
        var currentIndex = _ref2.currentIndex;
        return {
          currentIndex: (currentIndex + 1) % _react2.default.Children.count(children)
        };
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TypistLoop, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._isMounted = true;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isMounted = false;
      if (this._timer) {
        clearTimeout(this._timer);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var onTypingDone = this.onTypingDone;
      var currentIndex = this.state.currentIndex;
      var children = this.props.children;

      return _react2.default.Children.map(children, function (child, i) {
        return i === currentIndex && _react2.default.cloneElement(child, { onTypingDone: onTypingDone });
      });
    }
  }]);

  return TypistLoop;
}(_react2.default.Component);

TypistLoop.defaultProps = {
  interval: 1000
};
TypistLoop.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _propTypes2.default.node.isRequired,
  interval: _propTypes2.default.number
} : {};
exports.default = TypistLoop;
//# sourceMappingURL=TypistLoop.js.map